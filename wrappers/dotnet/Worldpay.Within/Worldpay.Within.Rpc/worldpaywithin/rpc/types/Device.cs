/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace worldpaywithin.rpc.types
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Device : TBase
  {

    public string Uid { get; set; }

    public string Name { get; set; }

    public string Description { get; set; }

    public Dictionary<int, Service> Services { get; set; }

    public string Ipv4Address { get; set; }

    public string CurrencyCode { get; set; }

    public Device() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Uid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Description = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Map) {
                {
                  Services = new Dictionary<int, Service>();
                  TMap _map0 = iprot.ReadMapBegin();
                  for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                  {
                    int _key2;
                    Service _val3;
                    _key2 = iprot.ReadI32();
                    _val3 = new Service();
                    _val3.Read(iprot);
                    Services[_key2] = _val3;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Ipv4Address = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                CurrencyCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Device");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Uid != null) {
          field.Name = "uid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uid);
          oprot.WriteFieldEnd();
        }
        if (Name != null) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Description != null) {
          field.Name = "description";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Description);
          oprot.WriteFieldEnd();
        }
        if (Services != null) {
          field.Name = "services";
          field.Type = TType.Map;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, Services.Count));
            foreach (int _iter4 in Services.Keys)
            {
              oprot.WriteI32(_iter4);
              Services[_iter4].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Ipv4Address != null) {
          field.Name = "ipv4Address";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Ipv4Address);
          oprot.WriteFieldEnd();
        }
        if (CurrencyCode != null) {
          field.Name = "currencyCode";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CurrencyCode);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Device(");
      bool __first = true;
      if (Uid != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uid: ");
        __sb.Append(Uid);
      }
      if (Name != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Description != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Description: ");
        __sb.Append(Description);
      }
      if (Services != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Services: ");
        __sb.Append(Services);
      }
      if (Ipv4Address != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ipv4Address: ");
        __sb.Append(Ipv4Address);
      }
      if (CurrencyCode != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CurrencyCode: ");
        __sb.Append(CurrencyCode);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
