/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace worldpaywithin.rpc
{
  public partial class WPWithin {
    /// <summary>
    /// WorldpayWithin Service - exposing all WorldpayWithin SDK functionality
    /// </summary>
    public interface Iface {
      void setup(string name, string description);
      #if SILVERLIGHT
      IAsyncResult Begin_setup(AsyncCallback callback, object state, string name, string description);
      void End_setup(IAsyncResult asyncResult);
      #endif
      void addService(worldpaywithin.rpc.types.Service svc);
      #if SILVERLIGHT
      IAsyncResult Begin_addService(AsyncCallback callback, object state, worldpaywithin.rpc.types.Service svc);
      void End_addService(IAsyncResult asyncResult);
      #endif
      void removeService(worldpaywithin.rpc.types.Service svc);
      #if SILVERLIGHT
      IAsyncResult Begin_removeService(AsyncCallback callback, object state, worldpaywithin.rpc.types.Service svc);
      void End_removeService(IAsyncResult asyncResult);
      #endif
      void initHCE(worldpaywithin.rpc.types.HCECard hceCard);
      #if SILVERLIGHT
      IAsyncResult Begin_initHCE(AsyncCallback callback, object state, worldpaywithin.rpc.types.HCECard hceCard);
      void End_initHCE(IAsyncResult asyncResult);
      #endif
      void initHTE(string merchantClientKey, string merchantServiceKey);
      #if SILVERLIGHT
      IAsyncResult Begin_initHTE(AsyncCallback callback, object state, string merchantClientKey, string merchantServiceKey);
      void End_initHTE(IAsyncResult asyncResult);
      #endif
      void initConsumer(string scheme, string hostname, int port, string urlPrefix, string serviceId);
      #if SILVERLIGHT
      IAsyncResult Begin_initConsumer(AsyncCallback callback, object state, string scheme, string hostname, int port, string urlPrefix, string serviceId);
      void End_initConsumer(IAsyncResult asyncResult);
      #endif
      void initProducer();
      #if SILVERLIGHT
      IAsyncResult Begin_initProducer(AsyncCallback callback, object state);
      void End_initProducer(IAsyncResult asyncResult);
      #endif
      worldpaywithin.rpc.types.Device getDevice();
      #if SILVERLIGHT
      IAsyncResult Begin_getDevice(AsyncCallback callback, object state);
      worldpaywithin.rpc.types.Device End_getDevice(IAsyncResult asyncResult);
      #endif
      void startServiceBroadcast(int timeoutMillis);
      #if SILVERLIGHT
      IAsyncResult Begin_startServiceBroadcast(AsyncCallback callback, object state, int timeoutMillis);
      void End_startServiceBroadcast(IAsyncResult asyncResult);
      #endif
      void stopServiceBroadcast();
      #if SILVERLIGHT
      IAsyncResult Begin_stopServiceBroadcast(AsyncCallback callback, object state);
      void End_stopServiceBroadcast(IAsyncResult asyncResult);
      #endif
      THashSet<worldpaywithin.rpc.types.ServiceMessage> serviceDiscovery(int timeoutMillis);
      #if SILVERLIGHT
      IAsyncResult Begin_serviceDiscovery(AsyncCallback callback, object state, int timeoutMillis);
      THashSet<worldpaywithin.rpc.types.ServiceMessage> End_serviceDiscovery(IAsyncResult asyncResult);
      #endif
      THashSet<worldpaywithin.rpc.types.ServiceDetails> requestServices();
      #if SILVERLIGHT
      IAsyncResult Begin_requestServices(AsyncCallback callback, object state);
      THashSet<worldpaywithin.rpc.types.ServiceDetails> End_requestServices(IAsyncResult asyncResult);
      #endif
      THashSet<worldpaywithin.rpc.types.Price> getServicePrices(int serviceId);
      #if SILVERLIGHT
      IAsyncResult Begin_getServicePrices(AsyncCallback callback, object state, int serviceId);
      THashSet<worldpaywithin.rpc.types.Price> End_getServicePrices(IAsyncResult asyncResult);
      #endif
      worldpaywithin.rpc.types.TotalPriceResponse selectService(int serviceId, int numberOfUnits, int priceId);
      #if SILVERLIGHT
      IAsyncResult Begin_selectService(AsyncCallback callback, object state, int serviceId, int numberOfUnits, int priceId);
      worldpaywithin.rpc.types.TotalPriceResponse End_selectService(IAsyncResult asyncResult);
      #endif
      worldpaywithin.rpc.types.PaymentResponse makePayment(worldpaywithin.rpc.types.TotalPriceResponse request);
      #if SILVERLIGHT
      IAsyncResult Begin_makePayment(AsyncCallback callback, object state, worldpaywithin.rpc.types.TotalPriceResponse request);
      worldpaywithin.rpc.types.PaymentResponse End_makePayment(IAsyncResult asyncResult);
      #endif
    }

    /// <summary>
    /// WorldpayWithin Service - exposing all WorldpayWithin SDK functionality
    /// </summary>
    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_setup(AsyncCallback callback, object state, string name, string description)
      {
        return send_setup(callback, state, name, description);
      }

      public void End_setup(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_setup();
      }

      #endif

      public void setup(string name, string description)
      {
        #if !SILVERLIGHT
        send_setup(name, description);
        recv_setup();

        #else
        var asyncResult = Begin_setup(null, null, name, description);
        End_setup(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setup(AsyncCallback callback, object state, string name, string description)
      #else
      public void send_setup(string name, string description)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setup", TMessageType.Call, seqid_));
        setup_args args = new setup_args();
        args.Name = name;
        args.Description = description;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_setup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setup_result result = new setup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.Err != null) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_addService(AsyncCallback callback, object state, worldpaywithin.rpc.types.Service svc)
      {
        return send_addService(callback, state, svc);
      }

      public void End_addService(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_addService();
      }

      #endif

      public void addService(worldpaywithin.rpc.types.Service svc)
      {
        #if !SILVERLIGHT
        send_addService(svc);
        recv_addService();

        #else
        var asyncResult = Begin_addService(null, null, svc);
        End_addService(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_addService(AsyncCallback callback, object state, worldpaywithin.rpc.types.Service svc)
      #else
      public void send_addService(worldpaywithin.rpc.types.Service svc)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("addService", TMessageType.Call, seqid_));
        addService_args args = new addService_args();
        args.Svc = svc;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_addService()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addService_result result = new addService_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.Err != null) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_removeService(AsyncCallback callback, object state, worldpaywithin.rpc.types.Service svc)
      {
        return send_removeService(callback, state, svc);
      }

      public void End_removeService(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_removeService();
      }

      #endif

      public void removeService(worldpaywithin.rpc.types.Service svc)
      {
        #if !SILVERLIGHT
        send_removeService(svc);
        recv_removeService();

        #else
        var asyncResult = Begin_removeService(null, null, svc);
        End_removeService(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_removeService(AsyncCallback callback, object state, worldpaywithin.rpc.types.Service svc)
      #else
      public void send_removeService(worldpaywithin.rpc.types.Service svc)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("removeService", TMessageType.Call, seqid_));
        removeService_args args = new removeService_args();
        args.Svc = svc;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_removeService()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        removeService_result result = new removeService_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.Err != null) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_initHCE(AsyncCallback callback, object state, worldpaywithin.rpc.types.HCECard hceCard)
      {
        return send_initHCE(callback, state, hceCard);
      }

      public void End_initHCE(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_initHCE();
      }

      #endif

      public void initHCE(worldpaywithin.rpc.types.HCECard hceCard)
      {
        #if !SILVERLIGHT
        send_initHCE(hceCard);
        recv_initHCE();

        #else
        var asyncResult = Begin_initHCE(null, null, hceCard);
        End_initHCE(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_initHCE(AsyncCallback callback, object state, worldpaywithin.rpc.types.HCECard hceCard)
      #else
      public void send_initHCE(worldpaywithin.rpc.types.HCECard hceCard)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("initHCE", TMessageType.Call, seqid_));
        initHCE_args args = new initHCE_args();
        args.HceCard = hceCard;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_initHCE()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        initHCE_result result = new initHCE_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.Err != null) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_initHTE(AsyncCallback callback, object state, string merchantClientKey, string merchantServiceKey)
      {
        return send_initHTE(callback, state, merchantClientKey, merchantServiceKey);
      }

      public void End_initHTE(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_initHTE();
      }

      #endif

      public void initHTE(string merchantClientKey, string merchantServiceKey)
      {
        #if !SILVERLIGHT
        send_initHTE(merchantClientKey, merchantServiceKey);
        recv_initHTE();

        #else
        var asyncResult = Begin_initHTE(null, null, merchantClientKey, merchantServiceKey);
        End_initHTE(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_initHTE(AsyncCallback callback, object state, string merchantClientKey, string merchantServiceKey)
      #else
      public void send_initHTE(string merchantClientKey, string merchantServiceKey)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("initHTE", TMessageType.Call, seqid_));
        initHTE_args args = new initHTE_args();
        args.MerchantClientKey = merchantClientKey;
        args.MerchantServiceKey = merchantServiceKey;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_initHTE()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        initHTE_result result = new initHTE_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.Err != null) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_initConsumer(AsyncCallback callback, object state, string scheme, string hostname, int port, string urlPrefix, string serviceId)
      {
        return send_initConsumer(callback, state, scheme, hostname, port, urlPrefix, serviceId);
      }

      public void End_initConsumer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_initConsumer();
      }

      #endif

      public void initConsumer(string scheme, string hostname, int port, string urlPrefix, string serviceId)
      {
        #if !SILVERLIGHT
        send_initConsumer(scheme, hostname, port, urlPrefix, serviceId);
        recv_initConsumer();

        #else
        var asyncResult = Begin_initConsumer(null, null, scheme, hostname, port, urlPrefix, serviceId);
        End_initConsumer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_initConsumer(AsyncCallback callback, object state, string scheme, string hostname, int port, string urlPrefix, string serviceId)
      #else
      public void send_initConsumer(string scheme, string hostname, int port, string urlPrefix, string serviceId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("initConsumer", TMessageType.Call, seqid_));
        initConsumer_args args = new initConsumer_args();
        args.Scheme = scheme;
        args.Hostname = hostname;
        args.Port = port;
        args.UrlPrefix = urlPrefix;
        args.ServiceId = serviceId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_initConsumer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        initConsumer_result result = new initConsumer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.Err != null) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_initProducer(AsyncCallback callback, object state)
      {
        return send_initProducer(callback, state);
      }

      public void End_initProducer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_initProducer();
      }

      #endif

      public void initProducer()
      {
        #if !SILVERLIGHT
        send_initProducer();
        recv_initProducer();

        #else
        var asyncResult = Begin_initProducer(null, null);
        End_initProducer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_initProducer(AsyncCallback callback, object state)
      #else
      public void send_initProducer()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("initProducer", TMessageType.Call, seqid_));
        initProducer_args args = new initProducer_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_initProducer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        initProducer_result result = new initProducer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.Err != null) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getDevice(AsyncCallback callback, object state)
      {
        return send_getDevice(callback, state);
      }

      public worldpaywithin.rpc.types.Device End_getDevice(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getDevice();
      }

      #endif

      public worldpaywithin.rpc.types.Device getDevice()
      {
        #if !SILVERLIGHT
        send_getDevice();
        return recv_getDevice();

        #else
        var asyncResult = Begin_getDevice(null, null);
        return End_getDevice(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getDevice(AsyncCallback callback, object state)
      #else
      public void send_getDevice()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getDevice", TMessageType.Call, seqid_));
        getDevice_args args = new getDevice_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public worldpaywithin.rpc.types.Device recv_getDevice()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getDevice_result result = new getDevice_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.Success != null) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDevice failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_startServiceBroadcast(AsyncCallback callback, object state, int timeoutMillis)
      {
        return send_startServiceBroadcast(callback, state, timeoutMillis);
      }

      public void End_startServiceBroadcast(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_startServiceBroadcast();
      }

      #endif

      public void startServiceBroadcast(int timeoutMillis)
      {
        #if !SILVERLIGHT
        send_startServiceBroadcast(timeoutMillis);
        recv_startServiceBroadcast();

        #else
        var asyncResult = Begin_startServiceBroadcast(null, null, timeoutMillis);
        End_startServiceBroadcast(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_startServiceBroadcast(AsyncCallback callback, object state, int timeoutMillis)
      #else
      public void send_startServiceBroadcast(int timeoutMillis)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("startServiceBroadcast", TMessageType.Call, seqid_));
        startServiceBroadcast_args args = new startServiceBroadcast_args();
        args.TimeoutMillis = timeoutMillis;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_startServiceBroadcast()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        startServiceBroadcast_result result = new startServiceBroadcast_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.Err != null) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_stopServiceBroadcast(AsyncCallback callback, object state)
      {
        return send_stopServiceBroadcast(callback, state);
      }

      public void End_stopServiceBroadcast(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_stopServiceBroadcast();
      }

      #endif

      public void stopServiceBroadcast()
      {
        #if !SILVERLIGHT
        send_stopServiceBroadcast();
        recv_stopServiceBroadcast();

        #else
        var asyncResult = Begin_stopServiceBroadcast(null, null);
        End_stopServiceBroadcast(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_stopServiceBroadcast(AsyncCallback callback, object state)
      #else
      public void send_stopServiceBroadcast()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("stopServiceBroadcast", TMessageType.Call, seqid_));
        stopServiceBroadcast_args args = new stopServiceBroadcast_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_stopServiceBroadcast()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        stopServiceBroadcast_result result = new stopServiceBroadcast_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.Err != null) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_serviceDiscovery(AsyncCallback callback, object state, int timeoutMillis)
      {
        return send_serviceDiscovery(callback, state, timeoutMillis);
      }

      public THashSet<worldpaywithin.rpc.types.ServiceMessage> End_serviceDiscovery(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_serviceDiscovery();
      }

      #endif

      public THashSet<worldpaywithin.rpc.types.ServiceMessage> serviceDiscovery(int timeoutMillis)
      {
        #if !SILVERLIGHT
        send_serviceDiscovery(timeoutMillis);
        return recv_serviceDiscovery();

        #else
        var asyncResult = Begin_serviceDiscovery(null, null, timeoutMillis);
        return End_serviceDiscovery(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_serviceDiscovery(AsyncCallback callback, object state, int timeoutMillis)
      #else
      public void send_serviceDiscovery(int timeoutMillis)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("serviceDiscovery", TMessageType.Call, seqid_));
        serviceDiscovery_args args = new serviceDiscovery_args();
        args.TimeoutMillis = timeoutMillis;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public THashSet<worldpaywithin.rpc.types.ServiceMessage> recv_serviceDiscovery()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        serviceDiscovery_result result = new serviceDiscovery_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.Success != null) {
          return result.Success;
        }
        if (result.Err != null) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "serviceDiscovery failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_requestServices(AsyncCallback callback, object state)
      {
        return send_requestServices(callback, state);
      }

      public THashSet<worldpaywithin.rpc.types.ServiceDetails> End_requestServices(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_requestServices();
      }

      #endif

      public THashSet<worldpaywithin.rpc.types.ServiceDetails> requestServices()
      {
        #if !SILVERLIGHT
        send_requestServices();
        return recv_requestServices();

        #else
        var asyncResult = Begin_requestServices(null, null);
        return End_requestServices(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_requestServices(AsyncCallback callback, object state)
      #else
      public void send_requestServices()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("requestServices", TMessageType.Call, seqid_));
        requestServices_args args = new requestServices_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public THashSet<worldpaywithin.rpc.types.ServiceDetails> recv_requestServices()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        requestServices_result result = new requestServices_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.Success != null) {
          return result.Success;
        }
        if (result.Err != null) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "requestServices failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getServicePrices(AsyncCallback callback, object state, int serviceId)
      {
        return send_getServicePrices(callback, state, serviceId);
      }

      public THashSet<worldpaywithin.rpc.types.Price> End_getServicePrices(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getServicePrices();
      }

      #endif

      public THashSet<worldpaywithin.rpc.types.Price> getServicePrices(int serviceId)
      {
        #if !SILVERLIGHT
        send_getServicePrices(serviceId);
        return recv_getServicePrices();

        #else
        var asyncResult = Begin_getServicePrices(null, null, serviceId);
        return End_getServicePrices(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getServicePrices(AsyncCallback callback, object state, int serviceId)
      #else
      public void send_getServicePrices(int serviceId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getServicePrices", TMessageType.Call, seqid_));
        getServicePrices_args args = new getServicePrices_args();
        args.ServiceId = serviceId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public THashSet<worldpaywithin.rpc.types.Price> recv_getServicePrices()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getServicePrices_result result = new getServicePrices_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.Success != null) {
          return result.Success;
        }
        if (result.Err != null) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getServicePrices failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_selectService(AsyncCallback callback, object state, int serviceId, int numberOfUnits, int priceId)
      {
        return send_selectService(callback, state, serviceId, numberOfUnits, priceId);
      }

      public worldpaywithin.rpc.types.TotalPriceResponse End_selectService(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_selectService();
      }

      #endif

      public worldpaywithin.rpc.types.TotalPriceResponse selectService(int serviceId, int numberOfUnits, int priceId)
      {
        #if !SILVERLIGHT
        send_selectService(serviceId, numberOfUnits, priceId);
        return recv_selectService();

        #else
        var asyncResult = Begin_selectService(null, null, serviceId, numberOfUnits, priceId);
        return End_selectService(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_selectService(AsyncCallback callback, object state, int serviceId, int numberOfUnits, int priceId)
      #else
      public void send_selectService(int serviceId, int numberOfUnits, int priceId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("selectService", TMessageType.Call, seqid_));
        selectService_args args = new selectService_args();
        args.ServiceId = serviceId;
        args.NumberOfUnits = numberOfUnits;
        args.PriceId = priceId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public worldpaywithin.rpc.types.TotalPriceResponse recv_selectService()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        selectService_result result = new selectService_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.Success != null) {
          return result.Success;
        }
        if (result.Err != null) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "selectService failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_makePayment(AsyncCallback callback, object state, worldpaywithin.rpc.types.TotalPriceResponse request)
      {
        return send_makePayment(callback, state, request);
      }

      public worldpaywithin.rpc.types.PaymentResponse End_makePayment(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_makePayment();
      }

      #endif

      public worldpaywithin.rpc.types.PaymentResponse makePayment(worldpaywithin.rpc.types.TotalPriceResponse request)
      {
        #if !SILVERLIGHT
        send_makePayment(request);
        return recv_makePayment();

        #else
        var asyncResult = Begin_makePayment(null, null, request);
        return End_makePayment(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_makePayment(AsyncCallback callback, object state, worldpaywithin.rpc.types.TotalPriceResponse request)
      #else
      public void send_makePayment(worldpaywithin.rpc.types.TotalPriceResponse request)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("makePayment", TMessageType.Call, seqid_));
        makePayment_args args = new makePayment_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public worldpaywithin.rpc.types.PaymentResponse recv_makePayment()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        makePayment_result result = new makePayment_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.Success != null) {
          return result.Success;
        }
        if (result.Err != null) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "makePayment failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["setup"] = setup_Process;
        processMap_["addService"] = addService_Process;
        processMap_["removeService"] = removeService_Process;
        processMap_["initHCE"] = initHCE_Process;
        processMap_["initHTE"] = initHTE_Process;
        processMap_["initConsumer"] = initConsumer_Process;
        processMap_["initProducer"] = initProducer_Process;
        processMap_["getDevice"] = getDevice_Process;
        processMap_["startServiceBroadcast"] = startServiceBroadcast_Process;
        processMap_["stopServiceBroadcast"] = stopServiceBroadcast_Process;
        processMap_["serviceDiscovery"] = serviceDiscovery_Process;
        processMap_["requestServices"] = requestServices_Process;
        processMap_["getServicePrices"] = getServicePrices_Process;
        processMap_["selectService"] = selectService_Process;
        processMap_["makePayment"] = makePayment_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void setup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setup_args args = new setup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setup_result result = new setup_result();
        try {
          iface_.setup(args.Name, args.Description);
        } catch (worldpaywithin.rpc.types.Error err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("setup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addService_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addService_args args = new addService_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addService_result result = new addService_result();
        try {
          iface_.addService(args.Svc);
        } catch (worldpaywithin.rpc.types.Error err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("addService", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void removeService_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        removeService_args args = new removeService_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        removeService_result result = new removeService_result();
        try {
          iface_.removeService(args.Svc);
        } catch (worldpaywithin.rpc.types.Error err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("removeService", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void initHCE_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        initHCE_args args = new initHCE_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        initHCE_result result = new initHCE_result();
        try {
          iface_.initHCE(args.HceCard);
        } catch (worldpaywithin.rpc.types.Error err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("initHCE", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void initHTE_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        initHTE_args args = new initHTE_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        initHTE_result result = new initHTE_result();
        try {
          iface_.initHTE(args.MerchantClientKey, args.MerchantServiceKey);
        } catch (worldpaywithin.rpc.types.Error err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("initHTE", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void initConsumer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        initConsumer_args args = new initConsumer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        initConsumer_result result = new initConsumer_result();
        try {
          iface_.initConsumer(args.Scheme, args.Hostname, args.Port.Value, args.UrlPrefix, args.ServiceId);
        } catch (worldpaywithin.rpc.types.Error err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("initConsumer", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void initProducer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        initProducer_args args = new initProducer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        initProducer_result result = new initProducer_result();
        try {
          iface_.initProducer();
        } catch (worldpaywithin.rpc.types.Error err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("initProducer", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getDevice_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getDevice_args args = new getDevice_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getDevice_result result = new getDevice_result();
        result.Success = iface_.getDevice();
        oprot.WriteMessageBegin(new TMessage("getDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void startServiceBroadcast_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        startServiceBroadcast_args args = new startServiceBroadcast_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        startServiceBroadcast_result result = new startServiceBroadcast_result();
        try {
          iface_.startServiceBroadcast(args.TimeoutMillis.Value);
        } catch (worldpaywithin.rpc.types.Error err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("startServiceBroadcast", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void stopServiceBroadcast_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        stopServiceBroadcast_args args = new stopServiceBroadcast_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        stopServiceBroadcast_result result = new stopServiceBroadcast_result();
        try {
          iface_.stopServiceBroadcast();
        } catch (worldpaywithin.rpc.types.Error err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("stopServiceBroadcast", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void serviceDiscovery_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        serviceDiscovery_args args = new serviceDiscovery_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        serviceDiscovery_result result = new serviceDiscovery_result();
        try {
          result.Success = iface_.serviceDiscovery(args.TimeoutMillis.Value);
        } catch (worldpaywithin.rpc.types.Error err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("serviceDiscovery", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void requestServices_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        requestServices_args args = new requestServices_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        requestServices_result result = new requestServices_result();
        try {
          result.Success = iface_.requestServices();
        } catch (worldpaywithin.rpc.types.Error err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("requestServices", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getServicePrices_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getServicePrices_args args = new getServicePrices_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getServicePrices_result result = new getServicePrices_result();
        try {
          result.Success = iface_.getServicePrices(args.ServiceId.Value);
        } catch (worldpaywithin.rpc.types.Error err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getServicePrices", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void selectService_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        selectService_args args = new selectService_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        selectService_result result = new selectService_result();
        try {
          result.Success = iface_.selectService(args.ServiceId.Value, args.NumberOfUnits.Value, args.PriceId.Value);
        } catch (worldpaywithin.rpc.types.Error err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("selectService", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void makePayment_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        makePayment_args args = new makePayment_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        makePayment_result result = new makePayment_result();
        try {
          result.Success = iface_.makePayment(args.Request);
        } catch (worldpaywithin.rpc.types.Error err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("makePayment", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setup_args : TBase
    {

      public string Name { get; set; }

      public string Description { get; set; }

      public setup_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Description = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setup_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Name != null) {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Name);
            oprot.WriteFieldEnd();
          }
          if (Description != null) {
            field.Name = "description";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Description);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setup_args(");
        bool __first = true;
        if (Name != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        if (Description != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Description: ");
          __sb.Append(Description);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setup_result : TBase
    {

      public worldpaywithin.rpc.types.Error Err { get; set; }

      public setup_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Err = new worldpaywithin.rpc.types.Error();
                  Err.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("setup_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setup_result(");
        bool __first = true;
        if (Err != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Err: ");
          __sb.Append(Err== null ? "<null>" : Err.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addService_args : TBase
    {

      public worldpaywithin.rpc.types.Service Svc { get; set; }

      public addService_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Svc = new worldpaywithin.rpc.types.Service();
                  Svc.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("addService_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Svc != null) {
            field.Name = "svc";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Svc.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("addService_args(");
        bool __first = true;
        if (Svc != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Svc: ");
          __sb.Append(Svc== null ? "<null>" : Svc.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addService_result : TBase
    {

      public worldpaywithin.rpc.types.Error Err { get; set; }

      public addService_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Err = new worldpaywithin.rpc.types.Error();
                  Err.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("addService_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("addService_result(");
        bool __first = true;
        if (Err != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Err: ");
          __sb.Append(Err== null ? "<null>" : Err.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeService_args : TBase
    {

      public worldpaywithin.rpc.types.Service Svc { get; set; }

      public removeService_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Svc = new worldpaywithin.rpc.types.Service();
                  Svc.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("removeService_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Svc != null) {
            field.Name = "svc";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Svc.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("removeService_args(");
        bool __first = true;
        if (Svc != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Svc: ");
          __sb.Append(Svc== null ? "<null>" : Svc.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeService_result : TBase
    {

      public worldpaywithin.rpc.types.Error Err { get; set; }

      public removeService_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Err = new worldpaywithin.rpc.types.Error();
                  Err.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("removeService_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("removeService_result(");
        bool __first = true;
        if (Err != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Err: ");
          __sb.Append(Err== null ? "<null>" : Err.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class initHCE_args : TBase
    {

      public worldpaywithin.rpc.types.HCECard HceCard { get; set; }

      public initHCE_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  HceCard = new worldpaywithin.rpc.types.HCECard();
                  HceCard.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("initHCE_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (HceCard != null) {
            field.Name = "hceCard";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            HceCard.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("initHCE_args(");
        bool __first = true;
        if (HceCard != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("HceCard: ");
          __sb.Append(HceCard== null ? "<null>" : HceCard.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class initHCE_result : TBase
    {

      public worldpaywithin.rpc.types.Error Err { get; set; }

      public initHCE_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Err = new worldpaywithin.rpc.types.Error();
                  Err.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("initHCE_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("initHCE_result(");
        bool __first = true;
        if (Err != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Err: ");
          __sb.Append(Err== null ? "<null>" : Err.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class initHTE_args : TBase
    {

      public string MerchantClientKey { get; set; }

      public string MerchantServiceKey { get; set; }

      public initHTE_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  MerchantClientKey = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  MerchantServiceKey = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("initHTE_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (MerchantClientKey != null) {
            field.Name = "merchantClientKey";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MerchantClientKey);
            oprot.WriteFieldEnd();
          }
          if (MerchantServiceKey != null) {
            field.Name = "merchantServiceKey";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MerchantServiceKey);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("initHTE_args(");
        bool __first = true;
        if (MerchantClientKey != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MerchantClientKey: ");
          __sb.Append(MerchantClientKey);
        }
        if (MerchantServiceKey != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MerchantServiceKey: ");
          __sb.Append(MerchantServiceKey);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class initHTE_result : TBase
    {

      public worldpaywithin.rpc.types.Error Err { get; set; }

      public initHTE_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Err = new worldpaywithin.rpc.types.Error();
                  Err.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("initHTE_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("initHTE_result(");
        bool __first = true;
        if (Err != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Err: ");
          __sb.Append(Err== null ? "<null>" : Err.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class initConsumer_args : TBase
    {

      public string Scheme { get; set; }

      public string Hostname { get; set; }

      public int? Port { get; set; }

      public string UrlPrefix { get; set; }

      public string ServiceId { get; set; }

      public initConsumer_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Scheme = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Hostname = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  Port = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  UrlPrefix = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.String) {
                  ServiceId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("initConsumer_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Scheme != null) {
            field.Name = "scheme";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Scheme);
            oprot.WriteFieldEnd();
          }
          if (Hostname != null) {
            field.Name = "hostname";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Hostname);
            oprot.WriteFieldEnd();
          }
          if (Port != null) {
            field.Name = "port";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Port.Value);
            oprot.WriteFieldEnd();
          }
          if (UrlPrefix != null) {
            field.Name = "urlPrefix";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UrlPrefix);
            oprot.WriteFieldEnd();
          }
          if (ServiceId != null) {
            field.Name = "serviceId";
            field.Type = TType.String;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ServiceId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("initConsumer_args(");
        bool __first = true;
        if (Scheme != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Scheme: ");
          __sb.Append(Scheme);
        }
        if (Hostname != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Hostname: ");
          __sb.Append(Hostname);
        }
        if (Port != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Port: ");
          __sb.Append(Port);
        }
        if (UrlPrefix != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UrlPrefix: ");
          __sb.Append(UrlPrefix);
        }
        if (ServiceId != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ServiceId: ");
          __sb.Append(ServiceId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class initConsumer_result : TBase
    {

      public worldpaywithin.rpc.types.Error Err { get; set; }

      public initConsumer_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Err = new worldpaywithin.rpc.types.Error();
                  Err.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("initConsumer_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("initConsumer_result(");
        bool __first = true;
        if (Err != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Err: ");
          __sb.Append(Err== null ? "<null>" : Err.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class initProducer_args : TBase
    {

      public initProducer_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("initProducer_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("initProducer_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class initProducer_result : TBase
    {

      public worldpaywithin.rpc.types.Error Err { get; set; }

      public initProducer_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Err = new worldpaywithin.rpc.types.Error();
                  Err.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("initProducer_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("initProducer_result(");
        bool __first = true;
        if (Err != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Err: ");
          __sb.Append(Err== null ? "<null>" : Err.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getDevice_args : TBase
    {

      public getDevice_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getDevice_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getDevice_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getDevice_result : TBase
    {

      public worldpaywithin.rpc.types.Device Success { get; set; }

      public getDevice_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new worldpaywithin.rpc.types.Device();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getDevice_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getDevice_result(");
        bool __first = true;
        if (Success != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class startServiceBroadcast_args : TBase
    {

      public int? TimeoutMillis { get; set; }

      public startServiceBroadcast_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  TimeoutMillis = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("startServiceBroadcast_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (TimeoutMillis != null) {
            field.Name = "timeoutMillis";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(TimeoutMillis.Value);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("startServiceBroadcast_args(");
        bool __first = true;
        if (TimeoutMillis != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TimeoutMillis: ");
          __sb.Append(TimeoutMillis);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class startServiceBroadcast_result : TBase
    {

      public worldpaywithin.rpc.types.Error Err { get; set; }

      public startServiceBroadcast_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Err = new worldpaywithin.rpc.types.Error();
                  Err.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("startServiceBroadcast_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("startServiceBroadcast_result(");
        bool __first = true;
        if (Err != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Err: ");
          __sb.Append(Err== null ? "<null>" : Err.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class stopServiceBroadcast_args : TBase
    {

      public stopServiceBroadcast_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("stopServiceBroadcast_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("stopServiceBroadcast_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class stopServiceBroadcast_result : TBase
    {

      public worldpaywithin.rpc.types.Error Err { get; set; }

      public stopServiceBroadcast_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Err = new worldpaywithin.rpc.types.Error();
                  Err.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("stopServiceBroadcast_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("stopServiceBroadcast_result(");
        bool __first = true;
        if (Err != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Err: ");
          __sb.Append(Err== null ? "<null>" : Err.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class serviceDiscovery_args : TBase
    {

      public int? TimeoutMillis { get; set; }

      public serviceDiscovery_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  TimeoutMillis = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("serviceDiscovery_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (TimeoutMillis != null) {
            field.Name = "timeoutMillis";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(TimeoutMillis.Value);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("serviceDiscovery_args(");
        bool __first = true;
        if (TimeoutMillis != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TimeoutMillis: ");
          __sb.Append(TimeoutMillis);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class serviceDiscovery_result : TBase
    {

      public THashSet<worldpaywithin.rpc.types.ServiceMessage> Success { get; set; }

      public worldpaywithin.rpc.types.Error Err { get; set; }

      public serviceDiscovery_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Set) {
                  {
                    Success = new THashSet<worldpaywithin.rpc.types.ServiceMessage>();
                    TSet _set0 = iprot.ReadSetBegin();
                    for( int _i1 = 0; _i1 < _set0.Count; ++_i1)
                    {
                      worldpaywithin.rpc.types.ServiceMessage _elem2;
                      _elem2 = new worldpaywithin.rpc.types.ServiceMessage();
                      _elem2.Read(iprot);
                      Success.Add(_elem2);
                    }
                    iprot.ReadSetEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Err = new worldpaywithin.rpc.types.Error();
                  Err.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("serviceDiscovery_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.Success != null) {
            field.Name = "Success";
            field.Type = TType.Set;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteSetBegin(new TSet(TType.Struct, Success.Count));
              foreach (worldpaywithin.rpc.types.ServiceMessage _iter3 in Success)
              {
                _iter3.Write(oprot);
              }
              oprot.WriteSetEnd();
            }
            oprot.WriteFieldEnd();
          } else if (this.Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("serviceDiscovery_result(");
        bool __first = true;
        if (Success != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Err != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Err: ");
          __sb.Append(Err== null ? "<null>" : Err.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class requestServices_args : TBase
    {

      public requestServices_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("requestServices_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("requestServices_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class requestServices_result : TBase
    {

      public THashSet<worldpaywithin.rpc.types.ServiceDetails> Success { get; set; }

      public worldpaywithin.rpc.types.Error Err { get; set; }

      public requestServices_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Set) {
                  {
                    Success = new THashSet<worldpaywithin.rpc.types.ServiceDetails>();
                    TSet _set4 = iprot.ReadSetBegin();
                    for( int _i5 = 0; _i5 < _set4.Count; ++_i5)
                    {
                      worldpaywithin.rpc.types.ServiceDetails _elem6;
                      _elem6 = new worldpaywithin.rpc.types.ServiceDetails();
                      _elem6.Read(iprot);
                      Success.Add(_elem6);
                    }
                    iprot.ReadSetEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Err = new worldpaywithin.rpc.types.Error();
                  Err.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("requestServices_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.Success != null) {
            field.Name = "Success";
            field.Type = TType.Set;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteSetBegin(new TSet(TType.Struct, Success.Count));
              foreach (worldpaywithin.rpc.types.ServiceDetails _iter7 in Success)
              {
                _iter7.Write(oprot);
              }
              oprot.WriteSetEnd();
            }
            oprot.WriteFieldEnd();
          } else if (this.Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("requestServices_result(");
        bool __first = true;
        if (Success != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Err != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Err: ");
          __sb.Append(Err== null ? "<null>" : Err.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getServicePrices_args : TBase
    {

      public int? ServiceId { get; set; }

      public getServicePrices_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ServiceId = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getServicePrices_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ServiceId != null) {
            field.Name = "serviceId";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ServiceId.Value);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getServicePrices_args(");
        bool __first = true;
        if (ServiceId != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ServiceId: ");
          __sb.Append(ServiceId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getServicePrices_result : TBase
    {

      public THashSet<worldpaywithin.rpc.types.Price> Success { get; set; }

      public worldpaywithin.rpc.types.Error Err { get; set; }

      public getServicePrices_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Set) {
                  {
                    Success = new THashSet<worldpaywithin.rpc.types.Price>();
                    TSet _set8 = iprot.ReadSetBegin();
                    for( int _i9 = 0; _i9 < _set8.Count; ++_i9)
                    {
                      worldpaywithin.rpc.types.Price _elem10;
                      _elem10 = new worldpaywithin.rpc.types.Price();
                      _elem10.Read(iprot);
                      Success.Add(_elem10);
                    }
                    iprot.ReadSetEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Err = new worldpaywithin.rpc.types.Error();
                  Err.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getServicePrices_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.Success != null) {
            field.Name = "Success";
            field.Type = TType.Set;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteSetBegin(new TSet(TType.Struct, Success.Count));
              foreach (worldpaywithin.rpc.types.Price _iter11 in Success)
              {
                _iter11.Write(oprot);
              }
              oprot.WriteSetEnd();
            }
            oprot.WriteFieldEnd();
          } else if (this.Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getServicePrices_result(");
        bool __first = true;
        if (Success != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Err != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Err: ");
          __sb.Append(Err== null ? "<null>" : Err.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class selectService_args : TBase
    {

      public int? ServiceId { get; set; }

      public int? NumberOfUnits { get; set; }

      public int? PriceId { get; set; }

      public selectService_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ServiceId = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  NumberOfUnits = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  PriceId = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("selectService_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ServiceId != null) {
            field.Name = "serviceId";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ServiceId.Value);
            oprot.WriteFieldEnd();
          }
          if (NumberOfUnits != null) {
            field.Name = "numberOfUnits";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(NumberOfUnits.Value);
            oprot.WriteFieldEnd();
          }
          if (PriceId != null) {
            field.Name = "priceId";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(PriceId.Value);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("selectService_args(");
        bool __first = true;
        if (ServiceId != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ServiceId: ");
          __sb.Append(ServiceId);
        }
        if (NumberOfUnits != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NumberOfUnits: ");
          __sb.Append(NumberOfUnits);
        }
        if (PriceId != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PriceId: ");
          __sb.Append(PriceId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class selectService_result : TBase
    {

      public worldpaywithin.rpc.types.TotalPriceResponse Success { get; set; }

      public worldpaywithin.rpc.types.Error Err { get; set; }

      public selectService_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new worldpaywithin.rpc.types.TotalPriceResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Err = new worldpaywithin.rpc.types.Error();
                  Err.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("selectService_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          } else if (this.Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("selectService_result(");
        bool __first = true;
        if (Success != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Err != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Err: ");
          __sb.Append(Err== null ? "<null>" : Err.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class makePayment_args : TBase
    {

      public worldpaywithin.rpc.types.TotalPriceResponse Request { get; set; }

      public makePayment_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Request = new worldpaywithin.rpc.types.TotalPriceResponse();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("makePayment_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Request != null) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("makePayment_args(");
        bool __first = true;
        if (Request != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class makePayment_result : TBase
    {

      public worldpaywithin.rpc.types.PaymentResponse Success { get; set; }

      public worldpaywithin.rpc.types.Error Err { get; set; }

      public makePayment_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new worldpaywithin.rpc.types.PaymentResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Err = new worldpaywithin.rpc.types.Error();
                  Err.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("makePayment_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          } else if (this.Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("makePayment_result(");
        bool __first = true;
        if (Success != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Err != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Err: ");
          __sb.Append(Err== null ? "<null>" : Err.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
