// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package wpthrift_types

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

// Attributes:
//  - Message
type Error struct {
	Message string `thrift:"message,1" json:"message"`
}

func NewError() *Error {
	return &Error{}
}

func (p *Error) GetMessage() string {
	return p.Message
}
func (p *Error) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Error) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *Error) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Error"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Error) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *Error) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Error(%+v)", *p)
}

func (p *Error) Error() string {
	return p.String()
}

// Attributes:
//  - ID
//  - Name
//  - Description
type Service struct {
	ID          int32  `thrift:"id,1" json:"id"`
	Name        string `thrift:"name,2" json:"name"`
	Description string `thrift:"description,3" json:"description"`
}

func NewService() *Service {
	return &Service{}
}

func (p *Service) GetID() int32 {
	return p.ID
}

func (p *Service) GetName() string {
	return p.Name
}

func (p *Service) GetDescription() string {
	return p.Description
}
func (p *Service) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Service) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Service) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Service) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Description = v
	}
	return nil
}

func (p *Service) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Service"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Service) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Service) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *Service) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:description: ", p), err)
	}
	if err := oprot.WriteString(string(p.Description)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.description (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:description: ", p), err)
	}
	return err
}

func (p *Service) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Service(%+v)", *p)
}

// Attributes:
//  - ServiceId
//  - ID
//  - Description
//  - PricePerUnit
//  - UnitId
//  - UnitDescription
type Price struct {
	ServiceId       int32         `thrift:"serviceId,1" json:"serviceId"`
	ID              int32         `thrift:"id,2" json:"id"`
	Description     string        `thrift:"description,3" json:"description"`
	PricePerUnit    *PricePerUnit `thrift:"pricePerUnit,4" json:"pricePerUnit"`
	UnitId          int32         `thrift:"unitId,5" json:"unitId"`
	UnitDescription string        `thrift:"unitDescription,6" json:"unitDescription"`
}

func NewPrice() *Price {
	return &Price{}
}

func (p *Price) GetServiceId() int32 {
	return p.ServiceId
}

func (p *Price) GetID() int32 {
	return p.ID
}

func (p *Price) GetDescription() string {
	return p.Description
}

var Price_PricePerUnit_DEFAULT PricePerUnit

func (p *Price) GetPricePerUnit() PricePerUnit {
	if !p.IsSetPricePerUnit() {
		return Price_PricePerUnit_DEFAULT
	}
	return *p.PricePerUnit
}

func (p *Price) GetUnitId() int32 {
	return p.UnitId
}

func (p *Price) GetUnitDescription() string {
	return p.UnitDescription
}
func (p *Price) IsSetPricePerUnit() bool {
	return p.PricePerUnit != nil
}

func (p *Price) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Price) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ServiceId = v
	}
	return nil
}

func (p *Price) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Price) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Description = v
	}
	return nil
}

func (p *Price) readField4(iprot thrift.TProtocol) error {
	p.PricePerUnit = &PricePerUnit{}
	if err := p.PricePerUnit.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PricePerUnit), err)
	}
	return nil
}

func (p *Price) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.UnitId = v
	}
	return nil
}

func (p *Price) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.UnitDescription = v
	}
	return nil
}

func (p *Price) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Price"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Price) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serviceId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serviceId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ServiceId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.serviceId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serviceId: ", p), err)
	}
	return err
}

func (p *Price) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err)
	}
	return err
}

func (p *Price) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:description: ", p), err)
	}
	if err := oprot.WriteString(string(p.Description)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.description (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:description: ", p), err)
	}
	return err
}

func (p *Price) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pricePerUnit", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pricePerUnit: ", p), err)
	}
	if err := p.PricePerUnit.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PricePerUnit), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pricePerUnit: ", p), err)
	}
	return err
}

func (p *Price) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("unitId", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:unitId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UnitId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.unitId (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:unitId: ", p), err)
	}
	return err
}

func (p *Price) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("unitDescription", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:unitDescription: ", p), err)
	}
	if err := oprot.WriteString(string(p.UnitDescription)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.unitDescription (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:unitDescription: ", p), err)
	}
	return err
}

func (p *Price) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Price(%+v)", *p)
}

// Attributes:
//  - Amount
//  - CurrencyCode
type PricePerUnit struct {
	Amount       int32  `thrift:"amount,1" json:"amount"`
	CurrencyCode string `thrift:"currencyCode,2" json:"currencyCode"`
}

func NewPricePerUnit() *PricePerUnit {
	return &PricePerUnit{}
}

func (p *PricePerUnit) GetAmount() int32 {
	return p.Amount
}

func (p *PricePerUnit) GetCurrencyCode() string {
	return p.CurrencyCode
}
func (p *PricePerUnit) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PricePerUnit) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Amount = v
	}
	return nil
}

func (p *PricePerUnit) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.CurrencyCode = v
	}
	return nil
}

func (p *PricePerUnit) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PricePerUnit"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PricePerUnit) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("amount", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:amount: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Amount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.amount (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:amount: ", p), err)
	}
	return err
}

func (p *PricePerUnit) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currencyCode", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:currencyCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.CurrencyCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.currencyCode (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:currencyCode: ", p), err)
	}
	return err
}

func (p *PricePerUnit) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PricePerUnit(%+v)", *p)
}

// Attributes:
//  - FirstName
//  - LastName
//  - ExpMonth
//  - ExpYear
//  - CardNumber
//  - Type
//  - Cvc
type HCECard struct {
	FirstName  string `thrift:"FirstName,1" json:"FirstName"`
	LastName   string `thrift:"LastName,2" json:"LastName"`
	ExpMonth   int32  `thrift:"ExpMonth,3" json:"ExpMonth"`
	ExpYear    int32  `thrift:"ExpYear,4" json:"ExpYear"`
	CardNumber string `thrift:"CardNumber,5" json:"CardNumber"`
	Type       string `thrift:"Type,6" json:"Type"`
	Cvc        string `thrift:"Cvc,7" json:"Cvc"`
}

func NewHCECard() *HCECard {
	return &HCECard{}
}

func (p *HCECard) GetFirstName() string {
	return p.FirstName
}

func (p *HCECard) GetLastName() string {
	return p.LastName
}

func (p *HCECard) GetExpMonth() int32 {
	return p.ExpMonth
}

func (p *HCECard) GetExpYear() int32 {
	return p.ExpYear
}

func (p *HCECard) GetCardNumber() string {
	return p.CardNumber
}

func (p *HCECard) GetType() string {
	return p.Type
}

func (p *HCECard) GetCvc() string {
	return p.Cvc
}
func (p *HCECard) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HCECard) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.FirstName = v
	}
	return nil
}

func (p *HCECard) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.LastName = v
	}
	return nil
}

func (p *HCECard) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ExpMonth = v
	}
	return nil
}

func (p *HCECard) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ExpYear = v
	}
	return nil
}

func (p *HCECard) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.CardNumber = v
	}
	return nil
}

func (p *HCECard) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *HCECard) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Cvc = v
	}
	return nil
}

func (p *HCECard) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HCECard"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HCECard) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("FirstName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:FirstName: ", p), err)
	}
	if err := oprot.WriteString(string(p.FirstName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.FirstName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:FirstName: ", p), err)
	}
	return err
}

func (p *HCECard) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("LastName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:LastName: ", p), err)
	}
	if err := oprot.WriteString(string(p.LastName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.LastName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:LastName: ", p), err)
	}
	return err
}

func (p *HCECard) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ExpMonth", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ExpMonth: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ExpMonth)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ExpMonth (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ExpMonth: ", p), err)
	}
	return err
}

func (p *HCECard) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ExpYear", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ExpYear: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ExpYear)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ExpYear (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ExpYear: ", p), err)
	}
	return err
}

func (p *HCECard) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CardNumber", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:CardNumber: ", p), err)
	}
	if err := oprot.WriteString(string(p.CardNumber)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CardNumber (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:CardNumber: ", p), err)
	}
	return err
}

func (p *HCECard) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Type", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Type: ", p), err)
	}
	if err := oprot.WriteString(string(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Type (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Type: ", p), err)
	}
	return err
}

func (p *HCECard) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Cvc", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Cvc: ", p), err)
	}
	if err := oprot.WriteString(string(p.Cvc)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Cvc (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Cvc: ", p), err)
	}
	return err
}

func (p *HCECard) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HCECard(%+v)", *p)
}

// Attributes:
//  - UID
//  - Name
//  - Description
//  - Services
//  - Ipv4Address
//  - CurrencyCode
type Device struct {
	UID          string             `thrift:"uid,1" json:"uid"`
	Name         string             `thrift:"name,2" json:"name"`
	Description  string             `thrift:"description,3" json:"description"`
	Services     map[int32]*Service `thrift:"services,4" json:"services"`
	Ipv4Address  string             `thrift:"ipv4Address,5" json:"ipv4Address"`
	CurrencyCode string             `thrift:"currencyCode,6" json:"currencyCode"`
}

func NewDevice() *Device {
	return &Device{}
}

func (p *Device) GetUID() string {
	return p.UID
}

func (p *Device) GetName() string {
	return p.Name
}

func (p *Device) GetDescription() string {
	return p.Description
}

func (p *Device) GetServices() map[int32]*Service {
	return p.Services
}

func (p *Device) GetIpv4Address() string {
	return p.Ipv4Address
}

func (p *Device) GetCurrencyCode() string {
	return p.CurrencyCode
}
func (p *Device) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Device) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *Device) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Device) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Description = v
	}
	return nil
}

func (p *Device) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int32]*Service, size)
	p.Services = tMap
	for i := 0; i < size; i++ {
		var _key0 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key0 = v
		}
		_val1 := &Service{}
		if err := _val1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val1), err)
		}
		p.Services[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Device) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Ipv4Address = v
	}
	return nil
}

func (p *Device) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.CurrencyCode = v
	}
	return nil
}

func (p *Device) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Device"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Device) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err)
	}
	if err := oprot.WriteString(string(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err)
	}
	return err
}

func (p *Device) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *Device) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:description: ", p), err)
	}
	if err := oprot.WriteString(string(p.Description)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.description (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:description: ", p), err)
	}
	return err
}

func (p *Device) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("services", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:services: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.Services)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Services {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:services: ", p), err)
	}
	return err
}

func (p *Device) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ipv4Address", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ipv4Address: ", p), err)
	}
	if err := oprot.WriteString(string(p.Ipv4Address)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ipv4Address (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ipv4Address: ", p), err)
	}
	return err
}

func (p *Device) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currencyCode", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:currencyCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.CurrencyCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.currencyCode (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:currencyCode: ", p), err)
	}
	return err
}

func (p *Device) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Device(%+v)", *p)
}

// Attributes:
//  - DeviceDescription
//  - Hostname
//  - PortNumber
//  - ServerId
//  - UrlPrefix
type ServiceMessage struct {
	DeviceDescription string `thrift:"deviceDescription,1" json:"deviceDescription"`
	Hostname          string `thrift:"hostname,2" json:"hostname"`
	PortNumber        int32  `thrift:"portNumber,3" json:"portNumber"`
	ServerId          string `thrift:"serverId,4" json:"serverId"`
	UrlPrefix         string `thrift:"urlPrefix,5" json:"urlPrefix"`
}

func NewServiceMessage() *ServiceMessage {
	return &ServiceMessage{}
}

func (p *ServiceMessage) GetDeviceDescription() string {
	return p.DeviceDescription
}

func (p *ServiceMessage) GetHostname() string {
	return p.Hostname
}

func (p *ServiceMessage) GetPortNumber() int32 {
	return p.PortNumber
}

func (p *ServiceMessage) GetServerId() string {
	return p.ServerId
}

func (p *ServiceMessage) GetUrlPrefix() string {
	return p.UrlPrefix
}
func (p *ServiceMessage) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ServiceMessage) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DeviceDescription = v
	}
	return nil
}

func (p *ServiceMessage) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Hostname = v
	}
	return nil
}

func (p *ServiceMessage) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PortNumber = v
	}
	return nil
}

func (p *ServiceMessage) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ServerId = v
	}
	return nil
}

func (p *ServiceMessage) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.UrlPrefix = v
	}
	return nil
}

func (p *ServiceMessage) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ServiceMessage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ServiceMessage) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceDescription", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deviceDescription: ", p), err)
	}
	if err := oprot.WriteString(string(p.DeviceDescription)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deviceDescription (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deviceDescription: ", p), err)
	}
	return err
}

func (p *ServiceMessage) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hostname", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hostname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Hostname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hostname (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hostname: ", p), err)
	}
	return err
}

func (p *ServiceMessage) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("portNumber", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:portNumber: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PortNumber)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.portNumber (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:portNumber: ", p), err)
	}
	return err
}

func (p *ServiceMessage) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serverId", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:serverId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ServerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.serverId (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:serverId: ", p), err)
	}
	return err
}

func (p *ServiceMessage) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("urlPrefix", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:urlPrefix: ", p), err)
	}
	if err := oprot.WriteString(string(p.UrlPrefix)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.urlPrefix (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:urlPrefix: ", p), err)
	}
	return err
}

func (p *ServiceMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServiceMessage(%+v)", *p)
}

// Attributes:
//  - ServiceId
//  - ServiceDescription
type ServiceDetails struct {
	ServiceId          int32  `thrift:"serviceId,1" json:"serviceId"`
	ServiceDescription string `thrift:"serviceDescription,2" json:"serviceDescription"`
}

func NewServiceDetails() *ServiceDetails {
	return &ServiceDetails{}
}

func (p *ServiceDetails) GetServiceId() int32 {
	return p.ServiceId
}

func (p *ServiceDetails) GetServiceDescription() string {
	return p.ServiceDescription
}
func (p *ServiceDetails) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ServiceDetails) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ServiceId = v
	}
	return nil
}

func (p *ServiceDetails) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ServiceDescription = v
	}
	return nil
}

func (p *ServiceDetails) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ServiceDetails"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ServiceDetails) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serviceId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serviceId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ServiceId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.serviceId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serviceId: ", p), err)
	}
	return err
}

func (p *ServiceDetails) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serviceDescription", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serviceDescription: ", p), err)
	}
	if err := oprot.WriteString(string(p.ServiceDescription)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.serviceDescription (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serviceDescription: ", p), err)
	}
	return err
}

func (p *ServiceDetails) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServiceDetails(%+v)", *p)
}

// Attributes:
//  - ServerId
//  - ClientId
//  - PriceId
//  - UnitsToSupply
//  - TotalPrice
//  - PaymentReferenceId
//  - MerchantClientKey
type TotalPriceResponse struct {
	ServerId           string `thrift:"serverId,1" json:"serverId"`
	ClientId           string `thrift:"clientId,2" json:"clientId"`
	PriceId            int32  `thrift:"priceId,3" json:"priceId"`
	UnitsToSupply      int32  `thrift:"unitsToSupply,4" json:"unitsToSupply"`
	TotalPrice         int32  `thrift:"totalPrice,5" json:"totalPrice"`
	PaymentReferenceId string `thrift:"paymentReferenceId,6" json:"paymentReferenceId"`
	MerchantClientKey  string `thrift:"merchantClientKey,7" json:"merchantClientKey"`
}

func NewTotalPriceResponse() *TotalPriceResponse {
	return &TotalPriceResponse{}
}

func (p *TotalPriceResponse) GetServerId() string {
	return p.ServerId
}

func (p *TotalPriceResponse) GetClientId() string {
	return p.ClientId
}

func (p *TotalPriceResponse) GetPriceId() int32 {
	return p.PriceId
}

func (p *TotalPriceResponse) GetUnitsToSupply() int32 {
	return p.UnitsToSupply
}

func (p *TotalPriceResponse) GetTotalPrice() int32 {
	return p.TotalPrice
}

func (p *TotalPriceResponse) GetPaymentReferenceId() string {
	return p.PaymentReferenceId
}

func (p *TotalPriceResponse) GetMerchantClientKey() string {
	return p.MerchantClientKey
}
func (p *TotalPriceResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TotalPriceResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ServerId = v
	}
	return nil
}

func (p *TotalPriceResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ClientId = v
	}
	return nil
}

func (p *TotalPriceResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PriceId = v
	}
	return nil
}

func (p *TotalPriceResponse) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.UnitsToSupply = v
	}
	return nil
}

func (p *TotalPriceResponse) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.TotalPrice = v
	}
	return nil
}

func (p *TotalPriceResponse) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.PaymentReferenceId = v
	}
	return nil
}

func (p *TotalPriceResponse) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.MerchantClientKey = v
	}
	return nil
}

func (p *TotalPriceResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TotalPriceResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TotalPriceResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serverId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serverId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ServerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.serverId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serverId: ", p), err)
	}
	return err
}

func (p *TotalPriceResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clientId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clientId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ClientId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.clientId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clientId: ", p), err)
	}
	return err
}

func (p *TotalPriceResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("priceId", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:priceId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PriceId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.priceId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:priceId: ", p), err)
	}
	return err
}

func (p *TotalPriceResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("unitsToSupply", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:unitsToSupply: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UnitsToSupply)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.unitsToSupply (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:unitsToSupply: ", p), err)
	}
	return err
}

func (p *TotalPriceResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalPrice", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:totalPrice: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TotalPrice)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalPrice (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:totalPrice: ", p), err)
	}
	return err
}

func (p *TotalPriceResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paymentReferenceId", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:paymentReferenceId: ", p), err)
	}
	if err := oprot.WriteString(string(p.PaymentReferenceId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.paymentReferenceId (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:paymentReferenceId: ", p), err)
	}
	return err
}

func (p *TotalPriceResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("merchantClientKey", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:merchantClientKey: ", p), err)
	}
	if err := oprot.WriteString(string(p.MerchantClientKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.merchantClientKey (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:merchantClientKey: ", p), err)
	}
	return err
}

func (p *TotalPriceResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TotalPriceResponse(%+v)", *p)
}

// Attributes:
//  - ServerId
//  - ClientId
//  - TotalPaid
//  - ServiceDeliveryToken
//  - ClientUUID
type PaymentResponse struct {
	ServerId             string                `thrift:"serverId,1" json:"serverId"`
	ClientId             string                `thrift:"clientId,2" json:"clientId"`
	TotalPaid            int32                 `thrift:"totalPaid,3" json:"totalPaid"`
	ServiceDeliveryToken *ServiceDeliveryToken `thrift:"serviceDeliveryToken,4" json:"serviceDeliveryToken"`
	ClientUUID           string                `thrift:"ClientUUID,5" json:"ClientUUID"`
}

func NewPaymentResponse() *PaymentResponse {
	return &PaymentResponse{}
}

func (p *PaymentResponse) GetServerId() string {
	return p.ServerId
}

func (p *PaymentResponse) GetClientId() string {
	return p.ClientId
}

func (p *PaymentResponse) GetTotalPaid() int32 {
	return p.TotalPaid
}

var PaymentResponse_ServiceDeliveryToken_DEFAULT ServiceDeliveryToken

func (p *PaymentResponse) GetServiceDeliveryToken() ServiceDeliveryToken {
	if !p.IsSetServiceDeliveryToken() {
		return PaymentResponse_ServiceDeliveryToken_DEFAULT
	}
	return *p.ServiceDeliveryToken
}

func (p *PaymentResponse) GetClientUUID() string {
	return p.ClientUUID
}
func (p *PaymentResponse) IsSetServiceDeliveryToken() bool {
	return p.ServiceDeliveryToken != nil
}

func (p *PaymentResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaymentResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ServerId = v
	}
	return nil
}

func (p *PaymentResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ClientId = v
	}
	return nil
}

func (p *PaymentResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TotalPaid = v
	}
	return nil
}

func (p *PaymentResponse) readField4(iprot thrift.TProtocol) error {
	p.ServiceDeliveryToken = &ServiceDeliveryToken{}
	if err := p.ServiceDeliveryToken.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServiceDeliveryToken), err)
	}
	return nil
}

func (p *PaymentResponse) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ClientUUID = v
	}
	return nil
}

func (p *PaymentResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PaymentResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaymentResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serverId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serverId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ServerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.serverId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serverId: ", p), err)
	}
	return err
}

func (p *PaymentResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clientId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clientId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ClientId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.clientId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clientId: ", p), err)
	}
	return err
}

func (p *PaymentResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalPaid", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:totalPaid: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TotalPaid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalPaid (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:totalPaid: ", p), err)
	}
	return err
}

func (p *PaymentResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serviceDeliveryToken", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:serviceDeliveryToken: ", p), err)
	}
	if err := p.ServiceDeliveryToken.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServiceDeliveryToken), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:serviceDeliveryToken: ", p), err)
	}
	return err
}

func (p *PaymentResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ClientUUID", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ClientUUID: ", p), err)
	}
	if err := oprot.WriteString(string(p.ClientUUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ClientUUID (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ClientUUID: ", p), err)
	}
	return err
}

func (p *PaymentResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentResponse(%+v)", *p)
}

// Attributes:
//  - Key
//  - Issued
//  - Expiry
//  - RefundOnExpiry
//  - Signature
type ServiceDeliveryToken struct {
	Key            string `thrift:"key,1" json:"key"`
	Issued         string `thrift:"issued,2" json:"issued"`
	Expiry         string `thrift:"expiry,3" json:"expiry"`
	RefundOnExpiry bool   `thrift:"refundOnExpiry,4" json:"refundOnExpiry"`
	Signature      []byte `thrift:"signature,5" json:"signature"`
}

func NewServiceDeliveryToken() *ServiceDeliveryToken {
	return &ServiceDeliveryToken{}
}

func (p *ServiceDeliveryToken) GetKey() string {
	return p.Key
}

func (p *ServiceDeliveryToken) GetIssued() string {
	return p.Issued
}

func (p *ServiceDeliveryToken) GetExpiry() string {
	return p.Expiry
}

func (p *ServiceDeliveryToken) GetRefundOnExpiry() bool {
	return p.RefundOnExpiry
}

func (p *ServiceDeliveryToken) GetSignature() []byte {
	return p.Signature
}
func (p *ServiceDeliveryToken) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ServiceDeliveryToken) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *ServiceDeliveryToken) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Issued = v
	}
	return nil
}

func (p *ServiceDeliveryToken) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Expiry = v
	}
	return nil
}

func (p *ServiceDeliveryToken) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.RefundOnExpiry = v
	}
	return nil
}

func (p *ServiceDeliveryToken) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Signature = v
	}
	return nil
}

func (p *ServiceDeliveryToken) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ServiceDeliveryToken"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ServiceDeliveryToken) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *ServiceDeliveryToken) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("issued", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:issued: ", p), err)
	}
	if err := oprot.WriteString(string(p.Issued)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.issued (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:issued: ", p), err)
	}
	return err
}

func (p *ServiceDeliveryToken) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("expiry", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expiry: ", p), err)
	}
	if err := oprot.WriteString(string(p.Expiry)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.expiry (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expiry: ", p), err)
	}
	return err
}

func (p *ServiceDeliveryToken) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("refundOnExpiry", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:refundOnExpiry: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.RefundOnExpiry)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.refundOnExpiry (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:refundOnExpiry: ", p), err)
	}
	return err
}

func (p *ServiceDeliveryToken) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("signature", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:signature: ", p), err)
	}
	if err := oprot.WriteBinary(p.Signature); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.signature (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:signature: ", p), err)
	}
	return err
}

func (p *ServiceDeliveryToken) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServiceDeliveryToken(%+v)", *p)
}
